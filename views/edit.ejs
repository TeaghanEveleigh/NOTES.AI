<%- include("partials/header") %>
<style>
  /* =========================
     THEME TOKENS (auto light/dark)
     ========================= */
  :root{
    --bg: #ffffff;
    --text: #111827;
    --muted: #f3f4f6;
    --border: #e5e7eb;
    --brand: #0b5fff;

    --note-bg: var(--bg);

    --chat-bg: #ffffff;      /* chat sheet background (opaque) */
    --chat-text: var(--text);
    --chat-muted: var(--muted);
    --chat-border: var(--border);
    --chat-brand: var(--brand);

    --bubble-ai-bg: #f5f7fb;
    --bubble-ai-text: var(--text);
    --bubble-user-bg: var(--brand);
    --bubble-user-text: #ffffff;

    --avatar-ai-bg: #e6fffb;
    --avatar-user-bg: #eef2ff;
    --code-bg: #0b172a;
    --code-fg: #e2e8f0;

    --shadow-strong: 0 16px 40px rgba(0,0,0,.25);
    --shadow:        0 10px 30px rgba(0,0,0,.20);
  }

  @media (prefers-color-scheme: dark){
    :root{
      --bg: #121212;
      --text: #eaeaea;
      --muted: #1f1f1f;
      --border: #2a2a2a;
      --brand: #3b82f6;

      --note-bg: #1f1f1f;

      --chat-bg: #141414;    /* solid, non-transparent */
      --chat-text: #eaeaea;
      --chat-muted: #1e1e1e;
      --chat-border: #2a2a2a;
      --chat-brand: #3b82f6;

      --bubble-ai-bg: #1f2937;
      --bubble-ai-text: #eaeaea;
      --bubble-user-bg: #0b5fff;
      --bubble-user-text: #ffffff;

      --avatar-ai-bg: #052e2b;
      --avatar-user-bg: #1f2a59;

      --code-bg: #0b172a;
      --code-fg: #e2e8f0;

      --shadow-strong: 0 16px 44px rgba(0,0,0,.55);
      --shadow:        0 10px 32px rgba(0,0,0,.45);
    }
  }

  /* =========================
     PAGE + QUILL
     ========================= */
  .note-container {
    width: 90%;
    max-width: 980px;
    margin: 24px auto;
    padding: 20px;
    box-shadow: var(--shadow);
    background: var(--note-bg);
    color: var(--chat-text);
    border-radius: 14px;
  }
  .note-container h1 { text-align: center; margin-bottom: 20px; }
  .form-control {
    background: var(--chat-muted);
    color: var(--chat-text);
    border: 1px solid var(--chat-border);
    border-radius: 10px;
  }
  .btn-primary {
    background: var(--chat-brand);
    border-color: var(--chat-brand);
    color: #fff;
    border-radius: 10px;
  }
  .ql-toolbar.ql-snow { background: var(--chat-muted); border-color: var(--chat-border); color: var(--chat-text); }
  .ql-container.ql-snow { background: var(--note-bg); border-color: var(--chat-border); color: var(--chat-text); }
  .ql-picker, .ql-stroke { color: var(--chat-text); stroke: var(--chat-text); }
  .ql-editor { color: var(--chat-text); }
  .ql-container.ql-snow { border-radius: 10px; min-height: 42vh; }

  /* =========================
     CHAT UI (sheet + fab)
     ========================= */
  #chat-fab {
    position: fixed; right: 24px; bottom: 24px;
    width: 68px; height: 68px; border-radius: 50%;
    display: inline-flex; align-items: center; justify-content: center;
    background: var(--chat-brand); color:#fff; border:none;
    box-shadow: var(--shadow-strong); cursor:pointer; z-index:1100; font-size:28px;
  }
  #chat-fab .material-icons { font-size: 30px; }

  .chat-sheet {
    position: fixed; right: 0; top: 0; bottom: 0; width: min(560px, 100%);
    transform: translateX(100%); transition: transform .2s ease;
    background: var(--chat-bg); color: var(--chat-text);
    border-left: 1px solid var(--chat-border); z-index: 1101;
    display: grid; grid-template-rows: auto 1fr auto;
    box-shadow: var(--shadow-strong);
  }
  .chat-sheet.open { transform: translateX(0%); }

  .chat-head {
    display:flex; align-items:center; justify-content:space-between; gap:12px;
    padding: 16px 18px; border-bottom:1px solid var(--chat-border); font-weight:700;
    background: var(--chat-bg); color: var(--chat-text);
  }
  .chat-head .title { display:flex; align-items:center; gap:10px; }
  .chat-head .title .material-icons { font-size:24px; color: var(--chat-brand); }
  #chat-close { background: transparent; border: 1px solid var(--chat-border); color: var(--chat-text); border-radius: 10px; padding: 6px 10px; }

  .chat-body {
    padding: 16px 18px; overflow-y:auto; display:flex; flex-direction:column; gap:12px;
    background: var(--chat-bg); color: var(--chat-text);
  }

  .msg { display:flex; gap:12px; }
  .msg.self { flex-direction: row-reverse; }
  .avatar {
    width:40px; height:40px; border-radius:50%;
    display:inline-flex; align-items:center; justify-content:center;
    flex: 0 0 40px; overflow:hidden; color:#fff; font-weight:800;
  }
  .avatar.user { background: var(--avatar-user-bg); color:#fff; }
  .avatar.ai   { background: var(--avatar-ai-bg); color:#bffcff; }
  .avatar svg { width: 22px; height: 22px; }

  .bubble {
    max-width: 78%;
    padding: 12px 14px;
    border-radius: 14px;
    font-size: 15.5px; line-height: 1.5;
    background: var(--bubble-ai-bg); color: var(--bubble-ai-text);
    box-shadow: 0 1px 3px rgba(0,0,0,.06);
    word-wrap: break-word;
  }
  .msg.self .bubble { background: var(--bubble-user-bg); color: var(--bubble-user-text); }

  .bubble .actions { margin-top: 8px; display:flex; gap: 8px; flex-wrap: wrap; }
  .chip {
    border:1px solid var(--chat-border);
    background: var(--chat-bg);
    color: var(--chat-text);
    padding: 6px 10px;
    border-radius: 999px;
    font-size: 12px;
    cursor: pointer;
  }
  .ghost-hint { font-size: 12px; opacity: .7; margin-top: 4px; }

  .chat-input {
    padding: 12px 16px; border-top:1px solid var(--chat-border);
    display:flex; gap:10px; background: var(--chat-bg);
  }
  .chat-input input {
    flex:1; border:1px solid var(--chat-border); padding:14px 16px; border-radius:12px; font-size:15.5px;
    background: var(--chat-muted); color: var(--chat-text);
  }
  .chat-input button {
    border:none; background: var(--chat-brand); color:#fff; border-radius:12px;
    min-width:56px; display:inline-flex; align-items:center; justify-content:center; padding: 0 14px;
    box-shadow: 0 4px 16px rgba(11,95,255,.25);
  }
  .chat-input button .material-icons { font-size: 22px; }

  /* Markdown look in bubbles */
  .bubble h1,.bubble h2,.bubble h3{ margin:.35em 0 .25em; }
  .bubble p{ margin:.25em 0; }
  .bubble ul{ margin:.25em 0 .25em 1.25em; }
  .bubble code{
    font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace;
    background: rgba(0,0,0,.08);
    padding: 2px 6px; border-radius: 6px;
  }
  .bubble pre{
    background: var(--code-bg); color: var(--code-fg);
    padding: 10px; border-radius: 10px; overflow: auto;
  }

  /* Loading dots for send button (replaces arrow entirely while loading) */
  .dots { display:inline-flex; gap:4px; align-items:center; justify-content:center; }
  .dot {
    width:6px; height:6px; border-radius:50%;
    background: #fff; opacity:.3; animation: pulse 1s infinite;
  }
  .dot:nth-child(2){ animation-delay: .15s; }
  .dot:nth-child(3){ animation-delay: .30s; }
  @keyframes pulse {
    0%, 100% { opacity: .3; transform: translateY(0); }
    50%      { opacity: 1;  transform: translateY(-2px); }
  }
</style>

<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/quill@1.3.7/dist/quill.snow.css" rel="stylesheet">

<body>
  <div class="note-container">
    <h1>Edit</h1>

    <form id="edit-form" action="/edit/<%= id %>" method="post">
      <div class="mb-3">
        <label for="title" class="form-label">Title</label>
        <input id="title" type="text" name="titleOfPost" autocomplete="off" class="form-control" value="<%= title %>">
      </div>

      <!-- Removed old Ask AI input -->

      <div class="mb-3">
        <label for="editor" class="form-label">Edit note</label>
        <div id="editor"></div>
        <input type="hidden" id="contentOfPost" name="contentOfPost" required>
      </div>

      <button class="btn btn-primary mt-2" type="submit" name="action" value="create">Save</button>
    </form>
  </div>

  <!-- AI FAB -->
  <button id="chat-fab" aria-label="Open AI assistant" type="button" title="Assistant">
    <span class="material-icons">face_2</span>
  </button>

  <!-- Chat sheet -->
  <aside id="chat-sheet" class="chat-sheet" aria-live="polite" aria-hidden="true">
    <header class="chat-head">
      <div class="title"><span class="material-icons">smart_toy</span> Assistant</div>
      <button id="chat-close" type="button" aria-label="Close">✕</button>
    </header>
    <main id="chat-body" class="chat-body"></main>
    <footer class="chat-input">
      <form id="chat-form">
        <input type="text" id="chat-input" placeholder="Ask for rewrites, bullets, outlines… (Press Tab to insert last suggestion)" autocomplete="off"/>
        <button id="chat-send" type="submit" aria-label="Send"><span class="material-icons">send</span></button>
      </form>
    </footer>
  </aside>

  <!-- jQuery & Bootstrap -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>

  <!-- Quill -->
  <script src="https://cdn.jsdelivr.net/npm/quill@1.3.7/dist/quill.min.js"></script>
  <!-- Markdown + sanitize -->
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/dompurify@3.1.7/dist/purify.min.js"></script>

  <script>
    /* ---------- Quill ---------- */
    var initialHtml = <%- JSON.stringify(text || "") %>;
    var quill = new Quill('#editor', {
      theme: 'snow',
      placeholder: 'Edit your note…',
      modules: {
        toolbar: [
          [{ header: [1, 2, 3, false] }],
          ['bold','italic','underline','strike'],
          [{ list:'ordered' }, { list:'bullet' }],
          [{ align:[] }],
          ['blockquote','code-block'],
          ['link'],
          ['clean']
        ]
      }
    });
    if (initialHtml && initialHtml !== "null") quill.clipboard.dangerouslyPasteHTML(initialHtml);

    const editForm = document.getElementById('edit-form');
    editForm.addEventListener('submit', function () {
      document.getElementById('contentOfPost').value = quill.root.innerHTML;
    });

    /* ---------- Chatbot ---------- */
    (function(){
      const fab      = document.getElementById('chat-fab');
      const sheet    = document.getElementById('chat-sheet');
      const closeBtn = document.getElementById('chat-close');
      const bodyEl   = document.getElementById('chat-body');
      const formEl   = document.getElementById('chat-form');
      const inputEl  = document.getElementById('chat-input');
      const sendBtn  = document.getElementById('chat-send');

      let greeted = false;
      let lastAiMarkdown = '';

      function openChat(){
        sheet.classList.add('open');
        sheet.setAttribute('aria-hidden','false');
        if (!greeted) {
          addMsg('ai', "Hi! I’m your writing helper for edits too. Ask me anything or tell me what to improve.\n\n*Tip:* after a suggestion, **press Tab** to insert it into your note.", true);
          greeted = true;
        }
      }
      function closeChat(){
        sheet.classList.remove('open');
        sheet.setAttribute('aria-hidden','true');
      }
      fab.addEventListener('click', openChat);
      closeBtn.addEventListener('click', closeChat);

      function aiAvatarSVG(){
        return `
          <div class="avatar ai" aria-hidden="true" title="AI">
            <svg viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
              <!-- a simple bot face -->
              <path d="M12 2a2 2 0 1 1 0 4h-.1A8 8 0 0 1 20 14v1a5 5 0 0 1-5 5H9a5 5 0 0 1-5-5v-1c0-3.87 3.13-7 7-7H12zm-3 8.25a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5Zm6 0a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5ZM8.5 17h7a.75.75 0 0 0 0-1.5h-7a.75.75 0 0 0 0 1.5Z"/>
            </svg>
          </div>`;
      }
      function userAvatar(letter){
        return `<div class="avatar user" title="You">${letter}</div>`;
      }
      function firstLetter(){
        const t = (document.getElementById('title')?.value || 'U').trim();
        return (t[0] || 'U').toUpperCase();
      }

      function renderMarkdown(md){
        const html = marked.parse(md || '');
        return DOMPurify.sanitize(html);
      }

      function addMsg(role, markdown, withActions=false){
        const msgEl = document.createElement('div');
        msgEl.className = `msg ${role === 'self' ? 'self' : 'ai'}`;

        const avatar = role === 'self' ? userAvatar(firstLetter()) : aiAvatarSVG();
        const bubble = document.createElement('div');
        bubble.className = 'bubble';
        bubble.innerHTML = renderMarkdown(markdown);

        if (withActions) {
          const acts = document.createElement('div');
          acts.className = 'actions';

          const copyBtn = document.createElement('button');
          copyBtn.type = 'button';
          copyBtn.className = 'chip';
          copyBtn.textContent = 'Copy';
          copyBtn.addEventListener('click', () => {
            navigator.clipboard.writeText(markdown).then(() => {
              copyBtn.textContent = 'Copied!';
              setTimeout(()=> copyBtn.textContent = 'Copy', 1200);
            });
          });

          const insertBtn = document.createElement('button');
          insertBtn.type = 'button';
          insertBtn.className = 'chip';
          insertBtn.textContent = 'Insert to editor';
          insertBtn.addEventListener('click', () => insertAiToQuill(markdown));

          acts.appendChild(copyBtn);
          acts.appendChild(insertBtn);

          const hint = document.createElement('div');
          hint.className = 'ghost-hint';
          hint.textContent = 'Tip: Press Tab to insert this into your note.';

          bubble.appendChild(acts);
          bubble.appendChild(hint);
        }

        msgEl.innerHTML = avatar;
        msgEl.appendChild(bubble);
        bodyEl.appendChild(msgEl);
        bodyEl.scrollTop = bodyEl.scrollHeight;
      }

      function setLoading(on){
        if (on){
          // remove arrow & show dots
          sendBtn.innerHTML = `<span class="dots"><span class="dot"></span><span class="dot"></span><span class="dot"></span></span>`;
          sendBtn.disabled = true;
        } else {
          // restore arrow
          sendBtn.innerHTML = `<span class="material-icons">send</span>`;
          sendBtn.disabled = false;
        }
      }

      async function send(text){
        addMsg('self', text, false);
        setLoading(true);
        try {
          // Reuse compose AI branch (JSON)
          const resp = await fetch('/compose', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              action: 'generate_ai',
              Prompt: text,
              contextHtml: quill.root.innerHTML
            })
          });
          const data = await resp.json();
          const reply = (resp.ok && data.ok && data.reply) ? (''+data.reply) : (data.error || 'Sorry, I couldn’t generate a response.');
          lastAiMarkdown = reply;
          addMsg('ai', reply, true);
        } catch (e) {
          console.error(e);
          lastAiMarkdown = '';
          addMsg('ai', 'Oops — AI request failed. Please try again.', false);
        } finally {
          setLoading(false);
        }
      }

      function insertAiToQuill(markdown){
        const html = renderMarkdown(markdown);
        const divider = '<hr style="opacity:.25;margin:12px 0;">';
        quill.clipboard.dangerouslyPasteHTML(quill.getLength()-1, `${divider}${html}`);
      }

      // Tab-to-insert last AI suggestion while chat is open
      window.addEventListener('keydown', function(e){
        if (!sheet.classList.contains('open')) return;
        if (e.key === 'Tab' && lastAiMarkdown) {
          e.preventDefault();
          insertAiToQuill(lastAiMarkdown);
        }
      });

      formEl.addEventListener('submit', function(e){
        e.preventDefault();
        const val = (inputEl.value || '').trim();
        if (!val) return;
        send(val);
        inputEl.value = '';
      });
    })();
  </script>
</body>

<%- include("partials/footer") %>
