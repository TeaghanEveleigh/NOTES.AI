<%- include("partials/header") %>
<link rel="stylesheet" href="/css/compose.css">

<!-- Material Icons (fixes the 'speaker_phone' showing as text) -->
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

<!-- Quill RTE -->
<link href="https://cdn.jsdelivr.net/npm/quill@1.3.7/dist/quill.snow.css" rel="stylesheet">

<body>
  <div class="container note-container">
    <h1>Compose</h1>

    <form id="compose-form" action="/compose" method="post">
      <div class="form-group">
        <label for="title">Title</label>
        <input id="title" type="text" name="titleOfPost" autocomplete="off" class="form-control" required>
      </div>

      <div class="form-group">
        <label for="prompt">Ask our AI</label>
        <div class="input-group">
          <input id="prompt" type="text" name="Prompt" autocomplete="off" class="form-control">
          <span class="input-group-btn">
            <button id="myButton" class="btn btn-secondary ai-ask-btn" type="submit" name="action" value="generate_ai">Ask AI</button>
          </span>
        </div>
      </div>

      <div class="form-group">
        <label for="editor">New note</label>

        <!-- Visible rich text editor -->
        <div id="editor" style="min-height: 220px;"></div>

        <!-- Hidden field your server actually reads -->
        <input type="hidden" id="contentOfPost" name="contentOfPost">
      </div>

      <div class="button-container">
        <button class="btn btn-primary" type="submit" name="action" value="create">Create</button>
      </div>
    </form>

    <div id="chat-circle" class="btn btn-raised">
      <div id="chat-overlay"></div>
      <i class="material-icons">speaker_phone</i>
    </div>

    <div class="chat-box">
      <div class="chat-box-header">
        ChatBot
        <span class="chat-box-toggle"><i class="material-icons">close</i></span>
      </div>
      <div class="chat-box-body">
        <div class="chat-box-overlay"></div>
        <div class="chat-logs"></div>
      </div>
      <div class="chat-input">
        <form>
          <input type="text" id="chat-input" placeholder="Send a message..."/>
          <button type="submit" class="chat-submit" id="chat-submit"><i class="material-icons">send</i></button>
        </form>
      </div>
    </div>
  </div>

  <!-- jQuery & Bootstrap JS -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>

  <!-- Quill JS -->
  <script src="https://cdn.jsdelivr.net/npm/quill@1.3.7/dist/quill.min.js"></script>

  <script>
    // ------- Quill setup --------
    var initialHtml =  JSON.stringify(typeof contentOfPost !== 'undefined' ? contentOfPost : '') ;

    var quill = new Quill('#editor', {
      theme: 'snow',
      placeholder: 'Write your note…',
      modules: {
        toolbar: [
          [{ header: [1, 2, 3, false] }],
          ['bold', 'italic', 'underline', 'strike'],
          [{ list: 'ordered' }, { list: 'bullet' }],
          [{ align: [] }],
          ['blockquote', 'code-block'],
          ['link'],
          ['clean']
        ]
      }
    });

    if (initialHtml) {
      quill.clipboard.dangerouslyPasteHTML(initialHtml);
    }

    // On submit, copy HTML from Quill into hidden input
    var form = document.getElementById('compose-form');
    form.addEventListener('submit', function () {
      document.getElementById('contentOfPost').value = quill.root.innerHTML;
    });

    // ------- "Ask AI" typing dots feedback (scoped & cleaned up) -------
    var myButton = document.getElementById('myButton');
    var titleInput = document.getElementById('title');
    var promptInput = document.getElementById('prompt');
    var dotsCount = 0;
    var message = 'AI typing';
    var aiInterval = null;

    myButton.addEventListener('click', function () {
      // Only animate if they’re actually clicking Ask AI submit
      // and both fields are present
      if (titleInput.value && promptInput.value) {
        if (aiInterval) clearInterval(aiInterval);
        aiInterval = setInterval(function () {
          dotsCount = (dotsCount + 1) % 4;
          myButton.textContent = message + '.'.repeat(dotsCount);
        }, 500);
      }
    });

    // Stop the animation on ANY form submission
    document.querySelector('form').addEventListener('submit', function () {
      if (aiInterval) {
        clearInterval(aiInterval);
        aiInterval = null;
      }
    });

    document.querySelector('form').addEventListener('submit', function () {
      const overlay = document.createElement('div');
      overlay.style.position = 'fixed';
      overlay.style.top = 0; overlay.style.right = 0; overlay.style.bottom = 0; overlay.style.left = 0;
      overlay.style.backgroundColor = 'rgba(0, 0, 0, 0)';
      document.body.appendChild(overlay);
    });

    // ------- Chatbox logic (unchanged except scoping) -------
    $(function () {
      var INDEX = 0;

      $("#chat-submit").click(function (e) {
        e.preventDefault();
        var msg = $("#chat-input").val();
        if (msg.trim() === '') return false;
        generate_message(msg, 'self');
        setTimeout(function () {
          // Echo back for now (replace with your GPT call)
          generate_message(msg, 'user');
        }, 600);
      });

      function generate_message(msg, type) {
        INDEX++;
        var str = "";
        str += "<div id='cm-msg-" + INDEX + "' class=\"chat-msg " + type + "\">";
        str += "  <span class=\"msg-avatar\">";
        str += "    <img src=\"https://image.crisp.im/avatar/operator/196af8cc-f6ad-4ef7-afd1-c45d5231387c/240/?1483361727745\">";
        str += "  </span>";
        str += "  <div class=\"cm-msg-text\">" + msg + "</div>";
        str += "</div>";
        $(".chat-logs").append(str);
        $("#cm-msg-" + INDEX).hide().fadeIn(300);
        if (type === 'self') $("#chat-input").val('');
        $(".chat-logs").stop().animate({ scrollTop: $(".chat-logs")[0].scrollHeight }, 500);
      }

      $("#chat-circle").click(function () {
        $("#chat-circle").toggle('scale');
        $(".chat-box").toggle('scale');
      });

      $(".chat-box-toggle").click(function () {
        $("#chat-circle").toggle('scale');
        $(".chat-box").toggle('scale');
      });
    });
    // ------- Chat bubble: real AI via /compose -------
  $(function () {
    let INDEX = 0;
    let greeted = false;

    // Helpers
    function escapeHtml(s){return (s||'').replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');}
    function addMessage(text, type, withCopy = false) {
      INDEX++;
      const copyBtn = withCopy
        ? `<button class="copy-btn" data-copy="${encodeURIComponent(text)}" title="Copy">Copy</button>`
        : '';
      const html = `
        <div id="cm-msg-${INDEX}" class="chat-msg ${type}">
          <span class="msg-avatar">
            <img src="https://image.crisp.im/avatar/operator/196af8cc-f6ad-4ef7-afd1-c45d5231387c/240/?1483361727745">
          </span>
          <div class="cm-msg-text">${escapeHtml(text).replace(/\n/g,'<br>')}</div>
          ${copyBtn}
        </div>`;
      $(".chat-logs").append(html);
      $(`#cm-msg-${INDEX}`).hide().fadeIn(200);
      $(".chat-logs").stop().animate({ scrollTop: $(".chat-logs")[0].scrollHeight }, 300);
    }
    function setLoading(btn, on) {
      if (!btn) return;
      if (on) {
        let dots = 0;
        btn.dataset._timer && clearInterval(btn.dataset._timer);
        btn.dataset._timer = setInterval(() => {
          dots = (dots + 1) % 4;
          btn.innerHTML = `<i class="material-icons">send</i> ${'.'.repeat(dots)}`;
        }, 500);
        btn.disabled = true;
      } else {
        btn.dataset._timer && clearInterval(btn.dataset._timer);
        btn.dataset._timer = '';
        btn.innerHTML = `<i class="material-icons">send</i>`;
        btn.disabled = false;
      }
    }

    // Open/close chat
    $("#chat-circle").click(function () {
      $("#chat-circle").toggle('scale');
      $(".chat-box").toggle('scale');
      if (!greeted) {
        addMessage("Hi! I’m your writing helper. Ask me anything or tell me what to draft. ✍️", 'user', true);
        greeted = true;
      }
    });
    $(".chat-box-toggle").click(function () {
      $("#chat-circle").toggle('scale');
      $(".chat-box").toggle('scale');
    });

    // Submit chat -> call /compose with action=generate_ai
    $("#chat-submit").off('click').on('click', async function (e) {
      e.preventDefault();
      const input = $("#chat-input");
      const msg = input.val();
      if (!msg.trim()) return;

      addMessage(msg, 'self');
      input.val('');

      const btn = document.getElementById('chat-submit');
      setLoading(btn, true);

      try {
        const resp = await fetch('/compose', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            action: 'generate_ai',
            Prompt: msg,
            contextHtml: (window.quill ? quill.root.innerHTML : '')
          })
        });
        const data = await resp.json().catch(() => ({}));
        const aiText = (resp.ok && data.ok && data.reply) ? data.reply : (data.error || 'Sorry, I couldn’t generate a response.');
        addMessage(aiText, 'user', true);
      } catch (err) {
        console.error(err);
        addMessage('Oops—AI request failed. Try again in a moment.', 'user', true);
      } finally {
        setLoading(btn, false);
      }
    });

    // Copy buttons inside chat
    $(document).on('click', '.copy-btn', function () {
      const txt = decodeURIComponent($(this).data('copy') || '');
      navigator.clipboard.writeText(txt).then(() => {
        $(this).text('Copied!');
        setTimeout(() => $(this).text('Copy'), 1200);
      });
    });
  });

  // Optional: style for the small Copy buttons in chat
</script>
<style>
  .chat-msg .copy-btn {
    margin-top: 6px;
    border: none;
    font-size: 12px;
    padding: 4px 8px;
    border-radius: 6px;
    cursor: pointer;
    background: #eaeaea;
  }
  @media (prefers-color-scheme: dark) {
    .chat-msg .copy-btn { background: #3a3a3a; color: #fff; }
  }
</style>
</body>

<%- include("partials/footer") %>
