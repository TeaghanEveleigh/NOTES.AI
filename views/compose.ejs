<%- include("partials/header") %>
<style>
  @media (prefers-color-scheme: dark) {
    .note-container { background-color: #1f1f1f!important; color: #fff; }
    .form-control   { background-color: #2a2a2a; color: #eaeaea; border: 1px solid #3a3a3a; }
    .btn-primary    { background-color: #3b82f6; border-color: #3b82f6; color: #fff; }
    .ql-toolbar.ql-snow { background:#2a2a2a; border-color:#444; color:#fff; }
    .ql-container.ql-snow { background:#1f1f1f; border-color:#444; color:#fff; }
    .ql-picker, .ql-stroke { color:#fff; stroke:#fff; }
    .ql-editor { color:#fff; }
    .chat-sheet { background:#121212; color:#eaeaea; border-color:#2a2a2a; }
    .msg.ai .bubble { background:#1f2937; color:#eaeaea; }
    .msg.self .bubble { background:#0b5fff; color:#fff; }
    #chat-fab { background:#3b82f6; color:#fff; }
  }

  .note-container {
    width: 90%; max-width: 980px; margin: 24px auto; padding: 20px;
    box-shadow: 0 8px 30px rgba(0,0,0,.15); background: #fff; border-radius: 14px;
  }
  .note-container h1 { text-align: center; margin-bottom: 20px; }
  .ql-container.ql-snow { border-radius: 10px; min-height: 42vh; }
  .btn { border-radius: 10px; }

  /* --- Modern Chat (right sheet) --- */
  #chat-fab {
    position: fixed; right: 24px; bottom: 24px; width: 66px; height: 66px;
    border-radius: 50%; display: inline-flex; align-items: center; justify-content: center;
    background: #0b5fff; color: #fff; border: none; box-shadow: 0 10px 30px rgba(0,0,0,.25);
    cursor: pointer; z-index: 1100; font-size: 28px;
  }
  #chat-fab .material-icons { font-size: 28px; }

  .chat-sheet {
    position: fixed; right: 0; top: 0; bottom: 0; width: min(520px, 100%);
    transform: translateX(100%); transition: transform .18s ease;
    background: #ffffff; border-left: 1px solid #eaeaea; z-index: 1101;
    display: grid; grid-template-rows: auto 1fr auto;
  }
  .chat-sheet.open { transform: translateX(0%); }

  .chat-head {
    display:flex; align-items:center; justify-content:space-between; gap:12px;
    padding: 14px 16px; border-bottom: 1px solid #eee; font-weight: 700;
  }
  .chat-head .title { display:flex; align-items:center; gap:10px; }
  .chat-head .title .material-icons { font-size: 24px; color:#0b5fff; }

  .chat-body {
    padding: 14px 16px; overflow-y: auto;
    display:flex; flex-direction: column; gap: 12px;
  }

  .msg { display:flex; gap:10px; }
  .msg.self { flex-direction: row-reverse; }
  .avatar {
    width: 36px; height: 36px; border-radius: 50%; display:inline-flex; align-items:center; justify-content:center;
    background:#e6eefc; color:#0b5fff; font-weight: 800; flex: 0 0 36px;
    overflow: hidden;
  }
  .avatar svg { width: 24px; height: 24px; }
  .avatar.user { background:#eef2ff; color:#0b5fff; }
  .avatar.ai   { background:#e6fffb; color:#0b5fff; }
  .bubble {
    max-width: 75%; padding: 10px 12px; border-radius: 12px; font-size: 15px; line-height: 1.45;
    background:#f5f7fb; color:#111;
    box-shadow: 0 1px 3px rgba(0,0,0,.06);
  }
  .msg.self .bubble { background:#0b5fff; color:#fff; }
  .bubble .actions { margin-top: 8px; display:flex; gap:8px; }
  .chip {
    border: 1px solid #e4e4e4; background:#fff; padding:4px 8px; border-radius:999px; font-size:12px; cursor:pointer;
  }

  .chat-input {
    padding: 12px 14px; border-top: 1px solid #eee; display:flex; gap:10px;
  }
  .chat-input input {
    flex:1; border: 1px solid #e0e0e0; padding: 12px 14px; border-radius: 12px; font-size: 15px;
  }
  .chat-input button {
    padding: 0 14px; border-radius: 12px; border:none; background:#0b5fff; color:#fff; display:inline-flex; align-items:center; justify-content:center;
    min-width: 52px; box-shadow: 0 4px 16px rgba(11,95,255,.25);
  }

  .ghost-hint { font-size: 12px; opacity: .7; margin-top: 4px; }

  /* markdown content styles inside .bubble */
  .bubble h1,.bubble h2,.bubble h3 { margin: .35em 0 .25em; }
  .bubble p { margin: .25em 0; }
  .bubble code { font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; background: rgba(0,0,0,.05); padding: 2px 6px; border-radius: 6px; }
  .bubble pre { background: #0b172a; color: #e2e8f0; padding: 10px; border-radius: 10px; overflow:auto; }
  .bubble ul { margin: .25em 0 .25em 1.25em; }
</style>

<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/quill@1.3.7/dist/quill.snow.css" rel="stylesheet">

<body>
  <div class="note-container">
    <h1>Compose</h1>

    <!-- Create Note -->
    <form id="compose-form" action="/compose" method="post">
      <div class="mb-3">
        <label for="title" class="form-label">Title</label>
        <input id="title" type="text" name="titleOfPost" autocomplete="off" class="form-control" required>
      </div>

      <div class="mb-3">
        <label for="editor" class="form-label">New note</label>
        <div id="editor"></div>
        <input type="hidden" id="contentOfPost" name="contentOfPost">
      </div>

      <button class="btn btn-primary" type="submit" name="action" value="create">Create</button>
    </form>
  </div>

  <!-- FAB -->
  <button id="chat-fab" aria-label="Open AI assistant" type="button" title="Assistant">
    <span class="material-icons">smart_toy</span>
  </button>

  <!-- Chat sheet -->
  <aside id="chat-sheet" class="chat-sheet" aria-live="polite" aria-hidden="true">
    <header class="chat-head">
      <div class="title">
        <span class="material-icons">smart_toy</span> Assistant
      </div>
      <button id="chat-close" class="btn btn-light" type="button" aria-label="Close">✕</button>
    </header>
    <main id="chat-body" class="chat-body"></main>
    <footer class="chat-input">
      <form id="chat-form">
        <input type="text" id="chat-input" placeholder="Ask for an outline, rewrite, bullets… (Tab accepts last suggestion)" autocomplete="off"/>
        <button id="chat-send" type="submit"><span class="material-icons">send</span></button>
      </form>
    </footer>
  </aside>

  <!-- jQuery & Bootstrap -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>

  <!-- Quill -->
  <script src="https://cdn.jsdelivr.net/npm/quill@1.3.7/dist/quill.min.js"></script>
  <!-- Markdown renderer + sanitizer -->
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/dompurify@3.1.7/dist/purify.min.js"></script>

  <script>
    /* ---------------- Quill ---------------- */
    var initialHtml = <%- JSON.stringify(typeof contentOfPost !== 'undefined' ? contentOfPost : '') %>;
    var quill = new Quill('#editor', {
      theme: 'snow',
      placeholder: 'Write your note…',
      modules: {
        toolbar: [
          [{ header: [1, 2, 3, false] }],
          ['bold','italic','underline','strike'],
          [{ list:'ordered' }, { list:'bullet' }],
          [{ align:[] }],
          ['blockquote','code-block'],
          ['link'],
          ['clean']
        ]
      }
    });
    if (initialHtml) quill.clipboard.dangerouslyPasteHTML(initialHtml);

    const composeForm = document.getElementById('compose-form');
    composeForm.addEventListener('submit', function () {
      document.getElementById('contentOfPost').value = quill.root.innerHTML;
    });

    /* ---------------- Chatbot ---------------- */
    (function(){
      const fab      = document.getElementById('chat-fab');
      const sheet    = document.getElementById('chat-sheet');
      const closeBtn = document.getElementById('chat-close');
      const bodyEl   = document.getElementById('chat-body');
      const formEl   = document.getElementById('chat-form');
      const inputEl  = document.getElementById('chat-input');
      const sendBtn  = document.getElementById('chat-send');

      let greeted = false;
      let lastAiMarkdown = ''; // store raw markdown for copy & Tab-to-insert

      function openChat(){
        sheet.classList.add('open');
        sheet.setAttribute('aria-hidden','false');
        if (!greeted) {
          addMsg('ai', "Hi! I’m your writing helper. Ask me anything or tell me what to draft.\n\n*Tip:* after a suggestion, **press Tab** to insert it into your note.", true);
          greeted = true;
        }
      }
      function closeChat(){
        sheet.classList.remove('open');
        sheet.setAttribute('aria-hidden','true');
      }

      fab.addEventListener('click', openChat);
      closeBtn.addEventListener('click', closeChat);

      // Render helpers
      function aiAvatarSVG(){
        return `
          <div class="avatar ai" aria-hidden="true" title="AI">
            <svg viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
              <path d="M12 2a7 7 0 0 0-7 7v2.1A4 4 0 0 0 3 15v1a4 4 0 0 0 4 4h10a4 4 0 0 0 4-4v-1a4 4 0 0 0-2-3.45V9a7 7 0 0 0-7-7Zm-3 8a1 1 0 1 1 0-2 1 1 0 0 1 0 2Zm6 0a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"/>
            </svg>
          </div>`;
      }
      function userAvatar(letter){
        return `<div class="avatar user" title="You">${letter}</div>`;
      }
      function firstLetter(){
        const t = (document.getElementById('title')?.value || 'U').trim();
        return (t[0] || 'U').toUpperCase();
      }

      function renderMarkdown(md){
        const html = marked.parse(md || '');
        return DOMPurify.sanitize(html);
      }

      function addMsg(role, markdown, withActions=false){
        const msgEl = document.createElement('div');
        msgEl.className = `msg ${role === 'self' ? 'self' : 'ai'}`;

        const avatar = role === 'self' ? userAvatar(firstLetter()) : aiAvatarSVG();
        const bubble = document.createElement('div');
        bubble.className = 'bubble';
        bubble.innerHTML = renderMarkdown(markdown);

        if (withActions) {
          const acts = document.createElement('div');
          acts.className = 'actions';
          // Copy button
          const copyBtn = document.createElement('button');
          copyBtn.type = 'button';
          copyBtn.className = 'chip';
          copyBtn.textContent = 'Copy';
          copyBtn.addEventListener('click', () => {
            navigator.clipboard.writeText(markdown).then(() => {
              copyBtn.textContent = 'Copied!';
              setTimeout(()=> copyBtn.textContent = 'Copy', 1200);
            });
          });
          // Insert button
          const insertBtn = document.createElement('button');
          insertBtn.type = 'button';
          insertBtn.className = 'chip';
          insertBtn.textContent = 'Insert to editor';
          insertBtn.addEventListener('click', () => insertAiToQuill(markdown));

          acts.appendChild(copyBtn);
          acts.appendChild(insertBtn);
          const hint = document.createElement('div');
          hint.className = 'ghost-hint';
          hint.textContent = 'Tip: Press Tab to insert this into your note.';
          bubble.appendChild(acts);
          bubble.appendChild(hint);
        }

        msgEl.innerHTML = avatar;
        msgEl.appendChild(bubble);
        bodyEl.appendChild(msgEl);
        bodyEl.scrollTop = bodyEl.scrollHeight;
      }

      async function send(text){
        // user bubble
        addMsg('self', text, false);

        // request
        let dots = 0;
        const orig = sendBtn.innerHTML;
        sendBtn.disabled = true;
        const tmr = setInterval(()=>{ dots=(dots+1)%4; sendBtn.innerHTML = `<span class="material-icons">send</span> ${'.'.repeat(dots)}`; }, 400);

        try {
          const resp = await fetch('/compose', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              action: 'generate_ai',
              Prompt: text,
              contextHtml: quill.root.innerHTML
            })
          });
          const data = await resp.json();
          const reply = (resp.ok && data.ok && data.reply) ? (''+data.reply) : (data.error || 'Sorry, I couldn’t generate a response.');
          lastAiMarkdown = reply;
          addMsg('ai', reply, true);
        } catch (e) {
          console.error(e);
          lastAiMarkdown = '';
          addMsg('ai', 'Oops — AI request failed. Please try again.', false);
        } finally {
          clearInterval(tmr);
          sendBtn.innerHTML = orig;
          sendBtn.disabled = false;
        }
      }

      function insertAiToQuill(markdown){
        // convert markdown -> HTML then insert
        const html = renderMarkdown(markdown);
        const divider = '<hr style="opacity:.25;margin:12px 0;">';
        quill.clipboard.dangerouslyPasteHTML(quill.getLength()-1, `${divider}${html}`);
      }

      // Tab-to-autofill: insert last AI suggestion
      window.addEventListener('keydown', function(e){
        if (!sheet.classList.contains('open')) return;
        if (e.key === 'Tab' && lastAiMarkdown) {
          e.preventDefault();
          insertAiToQuill(lastAiMarkdown);
        }
      });

      // Submit handler
      formEl.addEventListener('submit', function(e){
        e.preventDefault();
        const val = (inputEl.value || '').trim();
        if (!val) return;
        send(val);
        inputEl.value = '';
      });
    })();
  </script>
</body>

<%- include("partials/footer") %>
